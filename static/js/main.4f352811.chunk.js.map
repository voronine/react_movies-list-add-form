{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/helper.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","onValidate","useState","Math","random","toFixed","slice","id","touched","setTouched","validationError","hasError","isValid","htmlFor","type","classNames","event","target","onBlur","isValidUrl","url","test","NewMovie","handleMovieAdd","count","setCount","movieData","setMovieData","invalidUrl","setInvalidUrl","handleChange","field","newValue","prevData","isAddButtonDisabled","action","method","onSubmit","preventDefault","currentCount","style","color","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f352811.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  onValidate?: (value: string) => boolean,\n\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  onValidate = () => { },\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const validationError = onValidate(value);\n  const hasError = touched && (required && (!value || validationError));\n  const isValid = onValidate(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || isValid,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","export const isValidUrl = (url: string): boolean => {\n  const urlRegex = /^https?:\\/\\/\\S+\\.\\S+$/;\n\n  return urlRegex.test(url);\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { isValidUrl } from '../helper';\n\ntype Props = {\n  handleMovieAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ handleMovieAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [movieData, setMovieData] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [invalidUrl, setInvalidUrl] = useState(false);\n\n  const handleChange = (field: string, newValue: string) => {\n    setMovieData(prevData => ({\n      ...prevData,\n      [field]: newValue,\n    }));\n  };\n\n  const handlerReset = () => {\n    setMovieData({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!isValidUrl(movieData.imgUrl) || !isValidUrl(movieData.imdbUrl)) {\n      setInvalidUrl(true);\n\n      return;\n    }\n\n    setInvalidUrl(false);\n\n    handleMovieAdd(movieData);\n\n    setCount((currentCount) => currentCount + 1);\n    handlerReset();\n  };\n\n  const isAddButtonDisabled = !movieData.title\n    || !movieData.imdbUrl\n    || !movieData.imdbId;\n\n  return (\n    <form\n      action=\"/api/posts\"\n      method=\"POST\"\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movieData.title}\n        onChange={(newValue) => handleChange('title', newValue)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movieData.description}\n        onChange={(newValue) => handleChange('description', newValue)}\n\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movieData.imgUrl}\n        onChange={(newValue) => handleChange('imgUrl', newValue)}\n        onValidate={isValidUrl}\n        required\n      />\n      {invalidUrl && <div style={{ color: 'red' }}>Invalid URL</div>}\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movieData.imdbUrl}\n        onChange={(newValue) => handleChange('imdbUrl', newValue)}\n        onValidate={isValidUrl}\n        required\n      />\n      {invalidUrl && <div style={{ color: 'red' }}>Invalid URL</div>}\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movieData.imdbId}\n        onChange={(newValue) => handleChange('imdbId', newValue)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isAddButtonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const handleMovieAdd = (movie: Movie): void => {\n    setMovies((prevMovies) => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie handleMovieAdd={handleMovieAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}